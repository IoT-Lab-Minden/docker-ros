#include "knowrob_knowledge_base/listener.h"
/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
void perceptCallback(knowrob_semantic_map_msgs::SemMapObject msg)
{

  //std::cout << "Test \n";
  json_prolog::Prolog pl;
  std::string q = "create_object_perception(" +
                       "'http://knowrob.org/kb/knowrob.owl#"+obj.getType()+"', ["
                       + p.m00 + ","+ p.m01 + ","+ p.m02 + ","+ p.m03 + ","
                       + p.m10 + ","+ p.m11 + ","+ p.m12 + ","+ p.m13 + ","
                       + p.m20 + ","+ p.m21 + ","+ p.m22 + ","+ p.m23 + ","
                       + p.m30 + ","+ p.m31 + ","+ p.m32 + ","+ p.m33 +
                       "], ['DummyObjectDetection'], ObjInst)";
  json_prolog::PrologQueryProxy bdgs = pl.query("owl_individual_of(A, knowrob:'Aruco')");

  for( json_prolog::PrologQueryProxy::iterator it=bdgs.begin();
        it != bdgs.end(); it++)
    {
      json_prolog::PrologBindings bdg = *it;
      std::cout << "Found solution: " << (bool)(it == bdgs.end()) << std::endl;
      std::cout << "A = "<< bdg["A"] << std::endl;

    }
}

int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "knowrob_percept_listener");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing.  Messages are passed to a callback function, here
   * called chatterCallback.  subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   */
  ros::Subscriber sub = n.subscribe("/knowrob_percept", 1000, perceptCallback);

  /**
   * ros::spin() will enter a loop, pumping callbacks.  With this version, all
   * callbacks will be called from within this thread (the main one).  ros::spin()
   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
   */
  ros::spin();




  return 0;
}
