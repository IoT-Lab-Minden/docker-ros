// Generated by gencpp from file knowrob_semantic_map_msgs/SemMap.msg
// DO NOT EDIT!


#ifndef KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAP_H
#define KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <knowrob_semantic_map_msgs/SemMapPrefix.h>
#include <knowrob_semantic_map_msgs/SemMapAddress.h>
#include <knowrob_semantic_map_msgs/SemMapObject.h>
#include <knowrob_semantic_map_msgs/SemMapAction.h>
#include <knowrob_semantic_map_msgs/SemMapObjectProperty.h>
#include <knowrob_semantic_map_msgs/SemMapDataProperty.h>

namespace knowrob_semantic_map_msgs
{
template <class ContainerAllocator>
struct SemMap_
{
  typedef SemMap_<ContainerAllocator> Type;

  SemMap_()
    : header()
    , namespace()
    , id()
    , prefixes()
    , imports()
    , address()
    , objects()
    , actions()
    , object_properties()
    , data_properties()  {
    }
  SemMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , namespace(_alloc)
    , id(_alloc)
    , prefixes(_alloc)
    , imports(_alloc)
    , address(_alloc)
    , objects(_alloc)
    , actions(_alloc)
    , object_properties(_alloc)
    , data_properties(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _namespace_type;
  _namespace_type namespace;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::knowrob_semantic_map_msgs::SemMapPrefix_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::knowrob_semantic_map_msgs::SemMapPrefix_<ContainerAllocator> >::other >  _prefixes_type;
  _prefixes_type prefixes;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _imports_type;
  _imports_type imports;

   typedef  ::knowrob_semantic_map_msgs::SemMapAddress_<ContainerAllocator>  _address_type;
  _address_type address;

   typedef std::vector< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;

   typedef std::vector< ::knowrob_semantic_map_msgs::SemMapObjectProperty_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::knowrob_semantic_map_msgs::SemMapObjectProperty_<ContainerAllocator> >::other >  _object_properties_type;
  _object_properties_type object_properties;

   typedef std::vector< ::knowrob_semantic_map_msgs::SemMapDataProperty_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::knowrob_semantic_map_msgs::SemMapDataProperty_<ContainerAllocator> >::other >  _data_properties_type;
  _data_properties_type data_properties;




  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> const> ConstPtr;

}; // struct SemMap_

typedef ::knowrob_semantic_map_msgs::SemMap_<std::allocator<void> > SemMap;

typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMap > SemMapPtr;
typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMap const> SemMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace knowrob_semantic_map_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'knowrob_semantic_map_msgs': ['/root/catkin_ws/src/knowrob-semantic-map-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e7108a9a0ef8f86a3826823d610e711";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e7108a9a0ef8f86ULL;
  static const uint64_t static_value2 = 0xa3826823d610e711ULL;
};

template<class ContainerAllocator>
struct DataType< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowrob_semantic_map_msgs/SemMap";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Semantic map message type, Moritz Tenorth, tenorth@cs.tum.edu\n\
# Modifications by Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
Header header                             # map timestamp and frame id\n\
\n\
string namespace                          # OWL namespace of the map\n\
string id                                 # unique map identifier\n\
\n\
SemMapPrefix[] prefixes                   # OWL prefixes of the map\n\
string[] imports                          # OWL imports of the map\n\
\n\
SemMapAddress address                     # address of the map\n\
\n\
SemMapObject[] objects                    # list of objects in the map\n\
SemMapAction[] actions                    # list of actions defined on the map\n\
\n\
SemMapObjectProperty[] object_properties  # list of object properties\n\
SemMapDataProperty[] data_properties      # list of data properties\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapPrefix\n\
# Semantic map prefix message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
string name           # prefix name\n\
string prefix         # prefix\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapAddress\n\
# Semantic map address message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
string room_nr         # room number\n\
string floor_nr        # floor number\n\
string street_nr       # street number\n\
string street_name     # street name\n\
string city_name       # city name\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapObject\n\
# Semantic map object message type, Moritz Tenorth, tenorth@cs.tum.edu\n\
# Modifications by Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
Header header               # object timestamp and frame id\n\
\n\
string id                   # unique object identifier\n\
string type                 # object class\n\
\n\
SemMapObjectSize size       # object size\n\
geometry_msgs/Pose pose     # object pose\n\
\n\
string part_of              # identifier of the parent object\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapObjectSize\n\
# Semantic map object size message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
float32 x         # object depth\n\
float32 y         # object width\n\
float32 z         # object height\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapAction\n\
# Semantic map action message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
int8 INTERSECTION_OF = 0    # logic conjunction (and)\n\
int8 UNION_OF = 1           # logic disjunction (or)\n\
\n\
string id                   # unique action class identifier\n\
string type                 # action superclass\n\
bool asserted               # if true, this action is asserted\n\
\n\
string object_acted_on      # identifier of the object acted on\n\
\n\
string[] subactions         # identifiers of the subactions of this action\n\
int8 quantification         # logic quantification of subactions as given above\n\
bool unordered              # if true, subactions of this actions are unordered\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapObjectProperty\n\
# Semantic map object property message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
string id         # object property identifier\n\
string subject    # object property subject\n\
string object     # object property object\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapDataProperty\n\
# Semantic map data property message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
uint8 VALUE_TYPE_STRING = 0\n\
uint8 VALUE_TYPE_BOOL   = 1\n\
uint8 VALUE_TYPE_FLOAT  = 2\n\
uint8 VALUE_TYPE_INT    = 3\n\
\n\
string id           # data property identifier\n\
string subject      # data property subject\n\
uint8 value_type    # data property value type (as defined above)\n\
string value        # data property value\n\
";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.namespace);
      stream.next(m.id);
      stream.next(m.prefixes);
      stream.next(m.imports);
      stream.next(m.address);
      stream.next(m.objects);
      stream.next(m.actions);
      stream.next(m.object_properties);
      stream.next(m.data_properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowrob_semantic_map_msgs::SemMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "namespace: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.namespace);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "prefixes[]" << std::endl;
    for (size_t i = 0; i < v.prefixes.size(); ++i)
    {
      s << indent << "  prefixes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::knowrob_semantic_map_msgs::SemMapPrefix_<ContainerAllocator> >::stream(s, indent + "    ", v.prefixes[i]);
    }
    s << indent << "imports[]" << std::endl;
    for (size_t i = 0; i < v.imports.size(); ++i)
    {
      s << indent << "  imports[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.imports[i]);
    }
    s << indent << "address: ";
    s << std::endl;
    Printer< ::knowrob_semantic_map_msgs::SemMapAddress_<ContainerAllocator> >::stream(s, indent + "  ", v.address);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
    s << indent << "object_properties[]" << std::endl;
    for (size_t i = 0; i < v.object_properties.size(); ++i)
    {
      s << indent << "  object_properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::knowrob_semantic_map_msgs::SemMapObjectProperty_<ContainerAllocator> >::stream(s, indent + "    ", v.object_properties[i]);
    }
    s << indent << "data_properties[]" << std::endl;
    for (size_t i = 0; i < v.data_properties.size(); ++i)
    {
      s << indent << "  data_properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::knowrob_semantic_map_msgs::SemMapDataProperty_<ContainerAllocator> >::stream(s, indent + "    ", v.data_properties[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAP_H
