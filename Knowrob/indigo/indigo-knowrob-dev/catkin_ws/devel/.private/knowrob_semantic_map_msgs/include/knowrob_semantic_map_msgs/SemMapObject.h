// Generated by gencpp from file knowrob_semantic_map_msgs/SemMapObject.msg
// DO NOT EDIT!


#ifndef KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPOBJECT_H
#define KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <knowrob_semantic_map_msgs/SemMapObjectSize.h>
#include <geometry_msgs/Pose.h>

namespace knowrob_semantic_map_msgs
{
template <class ContainerAllocator>
struct SemMapObject_
{
  typedef SemMapObject_<ContainerAllocator> Type;

  SemMapObject_()
    : header()
    , id()
    , type()
    , size()
    , pose()
    , part_of()  {
    }
  SemMapObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , type(_alloc)
    , size(_alloc)
    , pose(_alloc)
    , part_of(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef  ::knowrob_semantic_map_msgs::SemMapObjectSize_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _part_of_type;
  _part_of_type part_of;




  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> const> ConstPtr;

}; // struct SemMapObject_

typedef ::knowrob_semantic_map_msgs::SemMapObject_<std::allocator<void> > SemMapObject;

typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapObject > SemMapObjectPtr;
typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapObject const> SemMapObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace knowrob_semantic_map_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'knowrob_semantic_map_msgs': ['/root/catkin_ws/src/knowrob-semantic-map-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "853ff87665f66f7abde208a4758d8f84";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x853ff87665f66f7aULL;
  static const uint64_t static_value2 = 0xbde208a4758d8f84ULL;
};

template<class ContainerAllocator>
struct DataType< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowrob_semantic_map_msgs/SemMapObject";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Semantic map object message type, Moritz Tenorth, tenorth@cs.tum.edu\n\
# Modifications by Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
Header header               # object timestamp and frame id\n\
\n\
string id                   # unique object identifier\n\
string type                 # object class\n\
\n\
SemMapObjectSize size       # object size\n\
geometry_msgs/Pose pose     # object pose\n\
\n\
string part_of              # identifier of the parent object\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: knowrob_semantic_map_msgs/SemMapObjectSize\n\
# Semantic map object size message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
float32 x         # object depth\n\
float32 y         # object width\n\
float32 z         # object height\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.size);
      stream.next(m.pose);
      stream.next(m.part_of);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemMapObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowrob_semantic_map_msgs::SemMapObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::knowrob_semantic_map_msgs::SemMapObjectSize_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "part_of: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.part_of);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPOBJECT_H
