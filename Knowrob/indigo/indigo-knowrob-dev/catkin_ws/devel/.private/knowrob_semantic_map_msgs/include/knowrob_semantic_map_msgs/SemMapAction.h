// Generated by gencpp from file knowrob_semantic_map_msgs/SemMapAction.msg
// DO NOT EDIT!


#ifndef KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPACTION_H
#define KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace knowrob_semantic_map_msgs
{
template <class ContainerAllocator>
struct SemMapAction_
{
  typedef SemMapAction_<ContainerAllocator> Type;

  SemMapAction_()
    : id()
    , type()
    , asserted(false)
    , object_acted_on()
    , subactions()
    , quantification(0)
    , unordered(false)  {
    }
  SemMapAction_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(_alloc)
    , asserted(false)
    , object_acted_on(_alloc)
    , subactions(_alloc)
    , quantification(0)
    , unordered(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint8_t _asserted_type;
  _asserted_type asserted;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_acted_on_type;
  _object_acted_on_type object_acted_on;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _subactions_type;
  _subactions_type subactions;

   typedef int8_t _quantification_type;
  _quantification_type quantification;

   typedef uint8_t _unordered_type;
  _unordered_type unordered;


    enum { INTERSECTION_OF = 0 };
     enum { UNION_OF = 1 };
 

  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> const> ConstPtr;

}; // struct SemMapAction_

typedef ::knowrob_semantic_map_msgs::SemMapAction_<std::allocator<void> > SemMapAction;

typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapAction > SemMapActionPtr;
typedef boost::shared_ptr< ::knowrob_semantic_map_msgs::SemMapAction const> SemMapActionConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace knowrob_semantic_map_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'knowrob_semantic_map_msgs': ['/root/catkin_ws/src/knowrob-semantic-map-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9106ee50615e0c06862a76ad1fc3b773";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9106ee50615e0c06ULL;
  static const uint64_t static_value2 = 0x862a76ad1fc3b773ULL;
};

template<class ContainerAllocator>
struct DataType< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "knowrob_semantic_map_msgs/SemMapAction";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Semantic map action message type, Ralf Kaestner, ralf.kaestner@gmail.com\n\
\n\
int8 INTERSECTION_OF = 0    # logic conjunction (and)\n\
int8 UNION_OF = 1           # logic disjunction (or)\n\
\n\
string id                   # unique action class identifier\n\
string type                 # action superclass\n\
bool asserted               # if true, this action is asserted\n\
\n\
string object_acted_on      # identifier of the object acted on\n\
\n\
string[] subactions         # identifiers of the subactions of this action\n\
int8 quantification         # logic quantification of subactions as given above\n\
bool unordered              # if true, subactions of this actions are unordered\n\
";
  }

  static const char* value(const ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.asserted);
      stream.next(m.object_acted_on);
      stream.next(m.subactions);
      stream.next(m.quantification);
      stream.next(m.unordered);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemMapAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::knowrob_semantic_map_msgs::SemMapAction_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "asserted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.asserted);
    s << indent << "object_acted_on: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_acted_on);
    s << indent << "subactions[]" << std::endl;
    for (size_t i = 0; i < v.subactions.size(); ++i)
    {
      s << indent << "  subactions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.subactions[i]);
    }
    s << indent << "quantification: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quantification);
    s << indent << "unordered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unordered);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KNOWROB_SEMANTIC_MAP_MSGS_MESSAGE_SEMMAPACTION_H
