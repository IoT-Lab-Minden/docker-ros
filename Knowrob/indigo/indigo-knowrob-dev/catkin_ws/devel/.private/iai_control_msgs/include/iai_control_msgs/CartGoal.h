// Generated by gencpp from file iai_control_msgs/CartGoal.msg
// DO NOT EDIT!


#ifndef IAI_CONTROL_MSGS_MESSAGE_CARTGOAL_H
#define IAI_CONTROL_MSGS_MESSAGE_CARTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace iai_control_msgs
{
template <class ContainerAllocator>
struct CartGoal_
{
  typedef CartGoal_<ContainerAllocator> Type;

  CartGoal_()
    : pose()
    , ee_frame_name()  {
    }
  CartGoal_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , ee_frame_name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ee_frame_name_type;
  _ee_frame_name_type ee_frame_name;




  typedef boost::shared_ptr< ::iai_control_msgs::CartGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_control_msgs::CartGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CartGoal_

typedef ::iai_control_msgs::CartGoal_<std::allocator<void> > CartGoal;

typedef boost::shared_ptr< ::iai_control_msgs::CartGoal > CartGoalPtr;
typedef boost::shared_ptr< ::iai_control_msgs::CartGoal const> CartGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_control_msgs::CartGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_control_msgs::CartGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iai_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'iai_control_msgs': ['/root/catkin_ws/src/iai_common_msgs/iai_control_msgs/msg', '/root/catkin_ws/devel/.private/iai_control_msgs/share/iai_control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_control_msgs::CartGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_control_msgs::CartGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_control_msgs::CartGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "635ae40b63305e709867162d912265c3";
  }

  static const char* value(const ::iai_control_msgs::CartGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x635ae40b63305e70ULL;
  static const uint64_t static_value2 = 0x9867162d912265c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_control_msgs/CartGoal";
  }

  static const char* value(const ::iai_control_msgs::CartGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command to give a cartesian goal to a robot\n\
geometry_msgs/PoseStamped pose   # Has the stamp, and the Pose of the goal\n\
string ee_frame_name  # Is the name of the EndEffector frame\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::iai_control_msgs::CartGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.ee_frame_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_control_msgs::CartGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_control_msgs::CartGoal_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "ee_frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ee_frame_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_CONTROL_MSGS_MESSAGE_CARTGOAL_H
