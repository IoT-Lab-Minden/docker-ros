# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iai_robosherlock_msgs/SimplePerceiveObjectAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import geometry_msgs.msg
import iai_robosherlock_msgs.msg
import genpy
import designator_integration_msgs.msg
import std_msgs.msg

class SimplePerceiveObjectAction(genpy.Message):
  _md5sum = "a46535474ba4984ba700172ae1483282"
  _type = "iai_robosherlock_msgs/SimplePerceiveObjectAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

SimplePerceiveObjectActionGoal action_goal
SimplePerceiveObjectActionResult action_result
SimplePerceiveObjectActionFeedback action_feedback

================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
SimplePerceiveObjectGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal
#
# list of descriptions of the objects the client wants the
# the perception system to look for
designator_integration_msgs/Designator[] requests

================================================================================
MSG: designator_integration_msgs/Designator
int32 TYPE_OBJECT=0
int32 TYPE_ACTION=1
int32 TYPE_LOCATION=2
int32 TYPE_HUMAN=3

int32 type

KeyValuePair[] description

================================================================================
MSG: designator_integration_msgs/KeyValuePair
# Purely for (de-)serialization purposes
int32 id
int32 parent

# Data
int32 TYPE_STRING=0
int32 TYPE_FLOAT=1
int32 TYPE_DATA=2
int32 TYPE_LIST=3
int32 TYPE_POSESTAMPED=4
int32 TYPE_POSE=5
int32 TYPE_DESIGNATOR_ACTION=6
int32 TYPE_DESIGNATOR_OBJECT=7
int32 TYPE_DESIGNATOR_LOCATION=8
int32 TYPE_DESIGNATOR_HUMAN=9
int32 TYPE_POINT=10
int32 TYPE_WRENCH=11
int32 TYPE_MATRIX=12
int32 TYPE_VECTOR=13

int32 type

string key
string value_string
float64 value_float
char[] value_data
float64[] value_array
geometry_msgs/PoseStamped value_posestamped
geometry_msgs/Pose value_pose
geometry_msgs/Point value_point
geometry_msgs/Wrench value_wrench

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
SimplePerceiveObjectResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
#
# upon termination or cancelation, the vision system sends back
# a (potentially incomplete, in case of cancel) list of descriptions
# of objects it has last seen
designator_integration_msgs/Designator[] percepts

================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
SimplePerceiveObjectFeedback feedback

================================================================================
MSG: iai_robosherlock_msgs/SimplePerceiveObjectFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback
#
# whenever the vision pipeline ran through, the vision system
# reports a list of descriptions of the objects it has found
designator_integration_msgs/Designator[] percepts

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['iai_robosherlock_msgs/SimplePerceiveObjectActionGoal','iai_robosherlock_msgs/SimplePerceiveObjectActionResult','iai_robosherlock_msgs/SimplePerceiveObjectActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimplePerceiveObjectAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionGoal()
      if self.action_result is None:
        self.action_result = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionFeedback()
    else:
      self.action_goal = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionGoal()
      self.action_result = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionResult()
      self.action_feedback = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.requests:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.value_array))
          _v1 = val2.value_posestamped
          _v2 = _v1.header
          buff.write(_struct_I.pack(_v2.seq))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v4 = _v1.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v7 = val2.value_pose
          _v8 = _v7.position
          _x = _v8
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v9 = _v7.orientation
          _x = _v9
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v10 = val2.value_point
          _x = _v10
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v11 = val2.value_wrench
          _v12 = _v11.force
          _x = _v12
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v13 = _v11.torque
          _x = _v13
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.percepts)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.percepts:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.value_array))
          _v14 = val2.value_posestamped
          _v15 = _v14.header
          buff.write(_struct_I.pack(_v15.seq))
          _v16 = _v15.stamp
          _x = _v16
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v15.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v17 = _v14.pose
          _v18 = _v17.position
          _x = _v18
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v19 = _v17.orientation
          _x = _v19
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v20 = val2.value_pose
          _v21 = _v20.position
          _x = _v21
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v22 = _v20.orientation
          _x = _v22
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v23 = val2.value_point
          _x = _v23
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v24 = val2.value_wrench
          _v25 = _v24.force
          _x = _v25
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v26 = _v24.torque
          _x = _v26
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.percepts)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.percepts:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.value_array))
          _v27 = val2.value_posestamped
          _v28 = _v27.header
          buff.write(_struct_I.pack(_v28.seq))
          _v29 = _v28.stamp
          _x = _v29
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v28.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v30 = _v27.pose
          _v31 = _v30.position
          _x = _v31
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v32 = _v30.orientation
          _x = _v32
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v33 = val2.value_pose
          _v34 = _v33.position
          _x = _v34
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v35 = _v33.orientation
          _x = _v35
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v36 = val2.value_point
          _x = _v36
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v37 = val2.value_wrench
          _v38 = _v37.force
          _x = _v38
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v39 = _v37.torque
          _x = _v39
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionGoal()
      if self.action_result is None:
        self.action_result = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.requests = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = struct.unpack(pattern, str[start:end])
          _v40 = val2.value_posestamped
          _v41 = _v40.header
          start = end
          end += 4
          (_v41.seq,) = _struct_I.unpack(str[start:end])
          _v42 = _v41.stamp
          _x = _v42
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v41.frame_id = str[start:end].decode('utf-8')
          else:
            _v41.frame_id = str[start:end]
          _v43 = _v40.pose
          _v44 = _v43.position
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v45 = _v43.orientation
          _x = _v45
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v46 = val2.value_pose
          _v47 = _v46.position
          _x = _v47
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v48 = _v46.orientation
          _x = _v48
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v49 = val2.value_point
          _x = _v49
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v50 = val2.value_wrench
          _v51 = _v50.force
          _x = _v51
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v52 = _v50.torque
          _x = _v52
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_goal.goal.requests.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.percepts = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = struct.unpack(pattern, str[start:end])
          _v53 = val2.value_posestamped
          _v54 = _v53.header
          start = end
          end += 4
          (_v54.seq,) = _struct_I.unpack(str[start:end])
          _v55 = _v54.stamp
          _x = _v55
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v54.frame_id = str[start:end].decode('utf-8')
          else:
            _v54.frame_id = str[start:end]
          _v56 = _v53.pose
          _v57 = _v56.position
          _x = _v57
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v58 = _v56.orientation
          _x = _v58
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v59 = val2.value_pose
          _v60 = _v59.position
          _x = _v60
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v61 = _v59.orientation
          _x = _v61
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v62 = val2.value_point
          _x = _v62
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v63 = val2.value_wrench
          _v64 = _v63.force
          _x = _v64
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v65 = _v63.torque
          _x = _v65
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_result.result.percepts.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.percepts = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = struct.unpack(pattern, str[start:end])
          _v66 = val2.value_posestamped
          _v67 = _v66.header
          start = end
          end += 4
          (_v67.seq,) = _struct_I.unpack(str[start:end])
          _v68 = _v67.stamp
          _x = _v68
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v67.frame_id = str[start:end].decode('utf-8')
          else:
            _v67.frame_id = str[start:end]
          _v69 = _v66.pose
          _v70 = _v69.position
          _x = _v70
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v71 = _v69.orientation
          _x = _v71
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v72 = val2.value_pose
          _v73 = _v72.position
          _x = _v73
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v74 = _v72.orientation
          _x = _v74
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v75 = val2.value_point
          _x = _v75
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v76 = val2.value_wrench
          _v77 = _v76.force
          _x = _v77
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v78 = _v76.torque
          _x = _v78
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_feedback.feedback.percepts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.requests:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.value_array.tostring())
          _v79 = val2.value_posestamped
          _v80 = _v79.header
          buff.write(_struct_I.pack(_v80.seq))
          _v81 = _v80.stamp
          _x = _v81
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v80.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v82 = _v79.pose
          _v83 = _v82.position
          _x = _v83
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v84 = _v82.orientation
          _x = _v84
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v85 = val2.value_pose
          _v86 = _v85.position
          _x = _v86
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v87 = _v85.orientation
          _x = _v87
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v88 = val2.value_point
          _x = _v88
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v89 = val2.value_wrench
          _v90 = _v89.force
          _x = _v90
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v91 = _v89.torque
          _x = _v91
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.percepts)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.percepts:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.value_array.tostring())
          _v92 = val2.value_posestamped
          _v93 = _v92.header
          buff.write(_struct_I.pack(_v93.seq))
          _v94 = _v93.stamp
          _x = _v94
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v93.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v95 = _v92.pose
          _v96 = _v95.position
          _x = _v96
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v97 = _v95.orientation
          _x = _v97
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v98 = val2.value_pose
          _v99 = _v98.position
          _x = _v99
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v100 = _v98.orientation
          _x = _v100
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v101 = val2.value_point
          _x = _v101
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v102 = val2.value_wrench
          _v103 = _v102.force
          _x = _v103
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v104 = _v102.torque
          _x = _v104
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.percepts)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.percepts:
        buff.write(_struct_i.pack(val1.type))
        length = len(val1.description)
        buff.write(_struct_I.pack(length))
        for val2 in val1.description:
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.parent, _x.type))
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.value_float))
          _x = val2.value_data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.value_array)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.value_array.tostring())
          _v105 = val2.value_posestamped
          _v106 = _v105.header
          buff.write(_struct_I.pack(_v106.seq))
          _v107 = _v106.stamp
          _x = _v107
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v106.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v108 = _v105.pose
          _v109 = _v108.position
          _x = _v109
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v110 = _v108.orientation
          _x = _v110
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v111 = val2.value_pose
          _v112 = _v111.position
          _x = _v112
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v113 = _v111.orientation
          _x = _v113
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v114 = val2.value_point
          _x = _v114
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v115 = val2.value_wrench
          _v116 = _v115.force
          _x = _v116
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v117 = _v115.torque
          _x = _v117
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionGoal()
      if self.action_result is None:
        self.action_result = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = iai_robosherlock_msgs.msg.SimplePerceiveObjectActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.requests = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v118 = val2.value_posestamped
          _v119 = _v118.header
          start = end
          end += 4
          (_v119.seq,) = _struct_I.unpack(str[start:end])
          _v120 = _v119.stamp
          _x = _v120
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v119.frame_id = str[start:end].decode('utf-8')
          else:
            _v119.frame_id = str[start:end]
          _v121 = _v118.pose
          _v122 = _v121.position
          _x = _v122
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v123 = _v121.orientation
          _x = _v123
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v124 = val2.value_pose
          _v125 = _v124.position
          _x = _v125
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v126 = _v124.orientation
          _x = _v126
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v127 = val2.value_point
          _x = _v127
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v128 = val2.value_wrench
          _v129 = _v128.force
          _x = _v129
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v130 = _v128.torque
          _x = _v130
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_goal.goal.requests.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.percepts = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v131 = val2.value_posestamped
          _v132 = _v131.header
          start = end
          end += 4
          (_v132.seq,) = _struct_I.unpack(str[start:end])
          _v133 = _v132.stamp
          _x = _v133
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v132.frame_id = str[start:end].decode('utf-8')
          else:
            _v132.frame_id = str[start:end]
          _v134 = _v131.pose
          _v135 = _v134.position
          _x = _v135
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v136 = _v134.orientation
          _x = _v136
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v137 = val2.value_pose
          _v138 = _v137.position
          _x = _v138
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v139 = _v137.orientation
          _x = _v139
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v140 = val2.value_point
          _x = _v140
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v141 = val2.value_wrench
          _v142 = _v141.force
          _x = _v142
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v143 = _v141.torque
          _x = _v143
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_result.result.percepts.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.percepts = []
      for i in range(0, length):
        val1 = designator_integration_msgs.msg.Designator()
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.description = []
        for i in range(0, length):
          val2 = designator_integration_msgs.msg.KeyValuePair()
          _x = val2
          start = end
          end += 12
          (_x.id, _x.parent, _x.type,) = _struct_3i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value_string = str[start:end].decode('utf-8')
          else:
            val2.value_string = str[start:end]
          start = end
          end += 8
          (val2.value_float,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.value_data = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.value_array = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v144 = val2.value_posestamped
          _v145 = _v144.header
          start = end
          end += 4
          (_v145.seq,) = _struct_I.unpack(str[start:end])
          _v146 = _v145.stamp
          _x = _v146
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v145.frame_id = str[start:end].decode('utf-8')
          else:
            _v145.frame_id = str[start:end]
          _v147 = _v144.pose
          _v148 = _v147.position
          _x = _v148
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v149 = _v147.orientation
          _x = _v149
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v150 = val2.value_pose
          _v151 = _v150.position
          _x = _v151
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v152 = _v150.orientation
          _x = _v152
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v153 = val2.value_point
          _x = _v153
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v154 = val2.value_wrench
          _v155 = _v154.force
          _x = _v155
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v156 = _v154.torque
          _x = _v156
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.description.append(val2)
        self.action_feedback.feedback.percepts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_3i = struct.Struct("<3i")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
