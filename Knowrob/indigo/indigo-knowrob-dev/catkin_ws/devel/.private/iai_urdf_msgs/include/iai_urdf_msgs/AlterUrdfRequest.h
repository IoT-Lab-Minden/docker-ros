// Generated by gencpp from file iai_urdf_msgs/AlterUrdfRequest.msg
// DO NOT EDIT!


#ifndef IAI_URDF_MSGS_MESSAGE_ALTERURDFREQUEST_H
#define IAI_URDF_MSGS_MESSAGE_ALTERURDFREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iai_urdf_msgs
{
template <class ContainerAllocator>
struct AlterUrdfRequest_
{
  typedef AlterUrdfRequest_<ContainerAllocator> Type;

  AlterUrdfRequest_()
    : action(0)
    , xml_elements_to_add()
    , element_names_to_remove()  {
    }
  AlterUrdfRequest_(const ContainerAllocator& _alloc)
    : action(0)
    , xml_elements_to_add(_alloc)
    , element_names_to_remove(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xml_elements_to_add_type;
  _xml_elements_to_add_type xml_elements_to_add;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _element_names_to_remove_type;
  _element_names_to_remove_type element_names_to_remove;


    enum { ADD = 1 };
     enum { REMOVE = 2 };
 

  typedef boost::shared_ptr< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AlterUrdfRequest_

typedef ::iai_urdf_msgs::AlterUrdfRequest_<std::allocator<void> > AlterUrdfRequest;

typedef boost::shared_ptr< ::iai_urdf_msgs::AlterUrdfRequest > AlterUrdfRequestPtr;
typedef boost::shared_ptr< ::iai_urdf_msgs::AlterUrdfRequest const> AlterUrdfRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iai_urdf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef7efe9a5c6f814f25e7f61e3fad05bf";
  }

  static const char* value(const ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef7efe9a5c6f814fULL;
  static const uint64_t static_value2 = 0x25e7f61e3fad05bfULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_urdf_msgs/AlterUrdfRequest";
  }

  static const char* value(const ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int8 ADD=1\n\
int8 REMOVE=2\n\
\n\
int8 action\n\
\n\
string xml_elements_to_add\n\
\n\
string[] element_names_to_remove\n\
";
  }

  static const char* value(const ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.xml_elements_to_add);
      stream.next(m.element_names_to_remove);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlterUrdfRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_urdf_msgs::AlterUrdfRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<int8_t>::stream(s, indent + "  ", v.action);
    s << indent << "xml_elements_to_add: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.xml_elements_to_add);
    s << indent << "element_names_to_remove[]" << std::endl;
    for (size_t i = 0; i < v.element_names_to_remove.size(); ++i)
    {
      s << indent << "  element_names_to_remove[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.element_names_to_remove[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_URDF_MSGS_MESSAGE_ALTERURDFREQUEST_H
