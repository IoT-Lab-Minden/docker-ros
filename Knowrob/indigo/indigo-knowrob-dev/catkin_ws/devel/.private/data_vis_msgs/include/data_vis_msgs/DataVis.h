// Generated by gencpp from file data_vis_msgs/DataVis.msg
// DO NOT EDIT!


#ifndef DATA_VIS_MSGS_MESSAGE_DATAVIS_H
#define DATA_VIS_MSGS_MESSAGE_DATAVIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <data_vis_msgs/ValueList.h>

namespace data_vis_msgs
{
template <class ContainerAllocator>
struct DataVis_
{
  typedef DataVis_<ContainerAllocator> Type;

  DataVis_()
    : id()
    , type(0)
    , title()
    , xlabel()
    , ylabel()
    , width(0)
    , height(0)
    , fontsize()
    , values()  {
    }
  DataVis_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(0)
    , title(_alloc)
    , xlabel(_alloc)
    , ylabel(_alloc)
    , width(0)
    , height(0)
    , fontsize(_alloc)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title_type;
  _title_type title;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xlabel_type;
  _xlabel_type xlabel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ylabel_type;
  _ylabel_type ylabel;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fontsize_type;
  _fontsize_type fontsize;

   typedef std::vector< ::data_vis_msgs::ValueList_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::data_vis_msgs::ValueList_<ContainerAllocator> >::other >  _values_type;
  _values_type values;


    enum { TYPE_PIECHART = 0 };
     enum { TYPE_BARCHART = 1 };
     enum { TYPE_TREECHART = 2 };
     enum { TYPE_TIMELINE = 3 };
     enum { TYPE_LINECHART = 4 };
 

  typedef boost::shared_ptr< ::data_vis_msgs::DataVis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_vis_msgs::DataVis_<ContainerAllocator> const> ConstPtr;

}; // struct DataVis_

typedef ::data_vis_msgs::DataVis_<std::allocator<void> > DataVis;

typedef boost::shared_ptr< ::data_vis_msgs::DataVis > DataVisPtr;
typedef boost::shared_ptr< ::data_vis_msgs::DataVis const> DataVisConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_vis_msgs::DataVis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_vis_msgs::DataVis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace data_vis_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'data_vis_msgs': ['/root/catkin_ws/src/iai_common_msgs/data_vis_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::data_vis_msgs::DataVis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_vis_msgs::DataVis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_vis_msgs::DataVis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_vis_msgs::DataVis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_vis_msgs::DataVis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_vis_msgs::DataVis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_vis_msgs::DataVis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54fc13c6e72b87a9c5ab7e772c90e8f2";
  }

  static const char* value(const ::data_vis_msgs::DataVis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54fc13c6e72b87a9ULL;
  static const uint64_t static_value2 = 0xc5ab7e772c90e8f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_vis_msgs::DataVis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_vis_msgs/DataVis";
  }

  static const char* value(const ::data_vis_msgs::DataVis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_vis_msgs::DataVis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 TYPE_PIECHART=0\n\
int32 TYPE_BARCHART=1\n\
int32 TYPE_TREECHART=2\n\
int32 TYPE_TIMELINE=3\n\
int32 TYPE_LINECHART=4\n\
\n\
string id\n\
int32 type\n\
string title\n\
string xlabel\n\
string ylabel\n\
int32 width\n\
int32 height\n\
string fontsize\n\
ValueList[] values\n\
\n\
================================================================================\n\
MSG: data_vis_msgs/ValueList\n\
string label\n\
string[] value1\n\
string[] value2\n\
";
  }

  static const char* value(const ::data_vis_msgs::DataVis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_vis_msgs::DataVis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.title);
      stream.next(m.xlabel);
      stream.next(m.ylabel);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.fontsize);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataVis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_vis_msgs::DataVis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_vis_msgs::DataVis_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title);
    s << indent << "xlabel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.xlabel);
    s << indent << "ylabel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ylabel);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "fontsize: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fontsize);
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::data_vis_msgs::ValueList_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_VIS_MSGS_MESSAGE_DATAVIS_H
